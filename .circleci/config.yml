version: 2
jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
    steps:
      - setup_remote_docker:
          version: 20.10.14

      - checkout

      - run: mkdir -p /tmp/test_results

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - minifast-bundle-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "Gemfile.lock" }}
            - minifast-bundle-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-
            - minifast-bundle-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: minifast-bundle-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - minifast-yarn-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
            - minifast-yarn-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-
            - minifast-yarn-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: minifast-yarn-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  rspec:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          BUNDLE_PATH: vendor/bundle
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - attach_workspace:
          at: ~/

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out /tmp/test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      # Save test results for timing analysis
      - store_test_results:
          path: /tmp/test_results

  linter:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
    steps:
      - setup_remote_docker:
          version: 20.10.14

      - attach_workspace:
          at: ~/

      - restore_cache:
          keys:
            - minifast-rubocop-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".rubocop.yml" }}
            - minifast-rubocop-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-
            - minifast-rubocop-

      - run:
          name: Rubocop
          command: |
            bundle exec rubocop --parallel \
                                --cache true \
                                -r $(bundle show rubocop-junit-formatter)/lib/rubocop/formatter/junit_formatter.rb \
                                --format RuboCop::Formatter::JUnitFormatter \
                                --out /tmp/test_results/rubocop.xml

      - type: cache-save
        key: minifast-rubocop-{{ .Environment.CACHE_VERSION }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".rubocop.yml" }}
        paths:
          - ~/.cache/rubocop_cache/

      - run:
          name: ESLint
          command: yarn eslint --format=junit --output-file="/tmp/test_results/eslint.xml" .

      - run:
          name: License Finder
          command: bundle exec license_finder

      - type: store_test_results
        path: /tmp/test_results

  staging:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - attach_workspace:
          at: ~/

      - run:
          name: Install AWS Command Line Interface
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            sudo pip install awscli
            aws --version

      - run:
          name: Configure Site
          command: aws cloudformation update-stack --stack-name=staging --capabilities CAPABILITY_IAM --region ${BUCKET_REGION} --template-body "`cat ./doc/cloudformation.json`" --parameters '[{"ParameterKey":"HostedZone","UsePreviousValue":true},{"ParameterKey":"AlternateHostedZone","UsePreviousValue":true},{"ParameterKey":"CertificateArn","UsePreviousValue":true}]' || echo 'No updates'

      - run:
          name: Build Site
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://staging.ministryofvelocity.com'
            bundle exec middleman build

      - run:
          name: Deploy Site
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://staging.ministryofvelocity.com'
            bundle exec middleman sync

      - run:
          name: Invalidate CDN
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=staging --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://staging.ministryofvelocity.com'
            bundle exec middleman invalidate

  deploy:
    parallelism: 1
    docker:
      - image: circleci/ruby:2.6-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
    steps:
      - setup_remote_docker:
          version: 20.10.14

      - attach_workspace:
          at: ~/

      - run:
          name: Install AWS Command Line Interface
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            sudo pip install awscli
            aws --version

      - run:
          name: Configure Site
          command: aws cloudformation update-stack --stack-name=www --capabilities CAPABILITY_IAM --region ${BUCKET_REGION} --template-body "`cat ./doc/cloudformation.json`" --parameters '[{"ParameterKey":"HostedZone","UsePreviousValue":true},{"ParameterKey":"AlternateHostedZone","UsePreviousValue":true},{"ParameterKey":"CertificateArn","UsePreviousValue":true}]' || echo 'No updates'

      - run:
          name: Build Site
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://www.ministryofvelocity.com'
            bundle exec middleman build

      - run:
          name: Deploy Site
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://www.ministryofvelocity.com'
            bundle exec middleman sync

      - run:
          name: Invalidate CDN
          command: |
            export BUCKET_NAME=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "BucketName") | .OutputValue'`
            export CLOUDFRONT_DISTRIBUTION_ID=`aws cloudformation describe-stacks --stack-name=www --region=${BUCKET_REGION} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId") | .OutputValue'`
            export RACK_BASE_URI='https://www.ministryofvelocity.com'
            bundle exec middleman invalidate

workflows:
  version: 2
  minifast:
    jobs:
      - build
      - linter:
          requires:
            - build
      - rspec:
          requires:
            - build
      - staging:
          requires:
            - rspec
            - linter
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - rspec
            - linter
          filters:
            branches:
              only:
                - production
